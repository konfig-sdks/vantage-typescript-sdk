/* tslint:disable */
/* eslint-disable */
/*
Vantage

Vantage API

The version of the OpenAPI document: 2.0.0
Contact: support@vantage.sh

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Errors } from '../models';
// @ts-ignore
import { Folder } from '../models';
// @ts-ignore
import { Folders } from '../models';
// @ts-ignore
import { PostFolders } from '../models';
// @ts-ignore
import { PutFolders } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FoldersApi - axios parameter creator
 * @export
 */
export const FoldersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a Folder for CostReports.
         * @param {PostFolders} postFolders 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFolderForCostReports: async (postFolders: PostFolders, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postFolders' is not null or undefined
            assertParamExists('createFolderForCostReports', 'postFolders', postFolders)
            const localVarPath = `/folders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: postFolders,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/folders',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(postFolders, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Folder for CostReports.
         * @param {string} folderToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFolderForCostReports: async (folderToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderToken' is not null or undefined
            assertParamExists('deleteFolderForCostReports', 'folderToken', folderToken)
            const localVarPath = `/folders/{folder_token}`
                .replace(`{${"folder_token"}}`, encodeURIComponent(String(folderToken !== undefined ? folderToken : `-folder_token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["write"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/folders/{folder_token}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a specific Folder for CostReports.
         * @param {string} folderToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificFolder: async (folderToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderToken' is not null or undefined
            assertParamExists('getSpecificFolder', 'folderToken', folderToken)
            const localVarPath = `/folders/{folder_token}`
                .replace(`{${"folder_token"}}`, encodeURIComponent(String(folderToken !== undefined ? folderToken : `-folder_token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/folders/{folder_token}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return all Folders for CostReports.
         * @param {number} [page] The page of results to return.
         * @param {number} [limit] The amount of results to return. The maximum is 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCostReports: async (page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/folders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["read"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/folders',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Folder for CostReports.
         * @param {string} folderToken 
         * @param {PutFolders} putFolders 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFolderForCostReports: async (folderToken: string, putFolders: PutFolders, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderToken' is not null or undefined
            assertParamExists('updateFolderForCostReports', 'folderToken', folderToken)
            // verify required parameter 'putFolders' is not null or undefined
            assertParamExists('updateFolderForCostReports', 'putFolders', putFolders)
            const localVarPath = `/folders/{folder_token}`
                .replace(`{${"folder_token"}}`, encodeURIComponent(String(folderToken !== undefined ? folderToken : `-folder_token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: putFolders,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/folders/{folder_token}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(putFolders, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FoldersApi - functional programming interface
 * @export
 */
export const FoldersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FoldersApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a Folder for CostReports.
         * @param {FoldersApiCreateFolderForCostReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFolderForCostReports(requestParameters: FoldersApiCreateFolderForCostReportsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Folder>> {
            const postFolders: PostFolders = {
                title: requestParameters.title,
                parent_folder_token: requestParameters.parent_folder_token,
                saved_filter_tokens: requestParameters.saved_filter_tokens,
                workspace_token: requestParameters.workspace_token
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFolderForCostReports(postFolders, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Folder for CostReports.
         * @param {FoldersApiDeleteFolderForCostReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFolderForCostReports(requestParameters: FoldersApiDeleteFolderForCostReportsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Folder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFolderForCostReports(requestParameters.folderToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return a specific Folder for CostReports.
         * @param {FoldersApiGetSpecificFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificFolder(requestParameters: FoldersApiGetSpecificFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Folder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificFolder(requestParameters.folderToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return all Folders for CostReports.
         * @param {FoldersApiListCostReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCostReports(requestParameters: FoldersApiListCostReportsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Folders>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCostReports(requestParameters.page, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a Folder for CostReports.
         * @param {FoldersApiUpdateFolderForCostReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFolderForCostReports(requestParameters: FoldersApiUpdateFolderForCostReportsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Folder>> {
            const putFolders: PutFolders = {
                title: requestParameters.title,
                parent_folder_token: requestParameters.parent_folder_token,
                saved_filter_tokens: requestParameters.saved_filter_tokens
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFolderForCostReports(requestParameters.folderToken, putFolders, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FoldersApi - factory interface
 * @export
 */
export const FoldersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FoldersApiFp(configuration)
    return {
        /**
         * Create a Folder for CostReports.
         * @param {FoldersApiCreateFolderForCostReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFolderForCostReports(requestParameters: FoldersApiCreateFolderForCostReportsRequest, options?: AxiosRequestConfig): AxiosPromise<Folder> {
            return localVarFp.createFolderForCostReports(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Folder for CostReports.
         * @param {FoldersApiDeleteFolderForCostReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFolderForCostReports(requestParameters: FoldersApiDeleteFolderForCostReportsRequest, options?: AxiosRequestConfig): AxiosPromise<Folder> {
            return localVarFp.deleteFolderForCostReports(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a specific Folder for CostReports.
         * @param {FoldersApiGetSpecificFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificFolder(requestParameters: FoldersApiGetSpecificFolderRequest, options?: AxiosRequestConfig): AxiosPromise<Folder> {
            return localVarFp.getSpecificFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return all Folders for CostReports.
         * @param {FoldersApiListCostReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCostReports(requestParameters: FoldersApiListCostReportsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Folders> {
            return localVarFp.listCostReports(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Folder for CostReports.
         * @param {FoldersApiUpdateFolderForCostReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFolderForCostReports(requestParameters: FoldersApiUpdateFolderForCostReportsRequest, options?: AxiosRequestConfig): AxiosPromise<Folder> {
            return localVarFp.updateFolderForCostReports(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createFolderForCostReports operation in FoldersApi.
 * @export
 * @interface FoldersApiCreateFolderForCostReportsRequest
 */
export type FoldersApiCreateFolderForCostReportsRequest = {
    
} & PostFolders

/**
 * Request parameters for deleteFolderForCostReports operation in FoldersApi.
 * @export
 * @interface FoldersApiDeleteFolderForCostReportsRequest
 */
export type FoldersApiDeleteFolderForCostReportsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof FoldersApiDeleteFolderForCostReports
    */
    readonly folderToken: string
    
}

/**
 * Request parameters for getSpecificFolder operation in FoldersApi.
 * @export
 * @interface FoldersApiGetSpecificFolderRequest
 */
export type FoldersApiGetSpecificFolderRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof FoldersApiGetSpecificFolder
    */
    readonly folderToken: string
    
}

/**
 * Request parameters for listCostReports operation in FoldersApi.
 * @export
 * @interface FoldersApiListCostReportsRequest
 */
export type FoldersApiListCostReportsRequest = {
    
    /**
    * The page of results to return.
    * @type {number}
    * @memberof FoldersApiListCostReports
    */
    readonly page?: number
    
    /**
    * The amount of results to return. The maximum is 1000.
    * @type {number}
    * @memberof FoldersApiListCostReports
    */
    readonly limit?: number
    
}

/**
 * Request parameters for updateFolderForCostReports operation in FoldersApi.
 * @export
 * @interface FoldersApiUpdateFolderForCostReportsRequest
 */
export type FoldersApiUpdateFolderForCostReportsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof FoldersApiUpdateFolderForCostReports
    */
    readonly folderToken: string
    
} & PutFolders

/**
 * FoldersApiGenerated - object-oriented interface
 * @export
 * @class FoldersApiGenerated
 * @extends {BaseAPI}
 */
export class FoldersApiGenerated extends BaseAPI {
    /**
     * Create a Folder for CostReports.
     * @param {FoldersApiCreateFolderForCostReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApiGenerated
     */
    public createFolderForCostReports(requestParameters: FoldersApiCreateFolderForCostReportsRequest, options?: AxiosRequestConfig) {
        return FoldersApiFp(this.configuration).createFolderForCostReports(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Folder for CostReports.
     * @param {FoldersApiDeleteFolderForCostReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApiGenerated
     */
    public deleteFolderForCostReports(requestParameters: FoldersApiDeleteFolderForCostReportsRequest, options?: AxiosRequestConfig) {
        return FoldersApiFp(this.configuration).deleteFolderForCostReports(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a specific Folder for CostReports.
     * @param {FoldersApiGetSpecificFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApiGenerated
     */
    public getSpecificFolder(requestParameters: FoldersApiGetSpecificFolderRequest, options?: AxiosRequestConfig) {
        return FoldersApiFp(this.configuration).getSpecificFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return all Folders for CostReports.
     * @param {FoldersApiListCostReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApiGenerated
     */
    public listCostReports(requestParameters: FoldersApiListCostReportsRequest = {}, options?: AxiosRequestConfig) {
        return FoldersApiFp(this.configuration).listCostReports(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a Folder for CostReports.
     * @param {FoldersApiUpdateFolderForCostReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FoldersApiGenerated
     */
    public updateFolderForCostReports(requestParameters: FoldersApiUpdateFolderForCostReportsRequest, options?: AxiosRequestConfig) {
        return FoldersApiFp(this.configuration).updateFolderForCostReports(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

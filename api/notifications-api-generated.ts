/* tslint:disable */
/* eslint-disable */
/*
Vantage

Vantage API

The version of the OpenAPI document: 2.0.0
Contact: support@vantage.sh

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Errors } from '../models';
// @ts-ignore
import { PostReportNotifications } from '../models';
// @ts-ignore
import { PutReportNotifications } from '../models';
// @ts-ignore
import { ReportNotification } from '../models';
// @ts-ignore
import { ReportNotifications } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * NotificationsApi - axios parameter creator
 * @export
 */
export const NotificationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a ReportNotification.
         * @param {PostReportNotifications} postReportNotifications 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReportNotification: async (postReportNotifications: PostReportNotifications, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postReportNotifications' is not null or undefined
            assertParamExists('createReportNotification', 'postReportNotifications', postReportNotifications)
            const localVarPath = `/report_notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: postReportNotifications,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/report_notifications',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(postReportNotifications, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a ReportNotification.
         * @param {string} reportNotificationToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReportNotification: async (reportNotificationToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportNotificationToken' is not null or undefined
            assertParamExists('deleteReportNotification', 'reportNotificationToken', reportNotificationToken)
            const localVarPath = `/report_notifications/{report_notification_token}`
                .replace(`{${"report_notification_token"}}`, encodeURIComponent(String(reportNotificationToken !== undefined ? reportNotificationToken : `-report_notification_token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["write"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/report_notifications/{report_notification_token}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return all ReportNotifications.
         * @param {number} [page] The page of results to return.
         * @param {number} [limit] The amount of results to return. The maximum is 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllReportNotifications: async (page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/report_notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["read"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/report_notifications',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a ReportNotification.
         * @param {string} reportNotificationToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportNotification: async (reportNotificationToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportNotificationToken' is not null or undefined
            assertParamExists('getReportNotification', 'reportNotificationToken', reportNotificationToken)
            const localVarPath = `/report_notifications/{report_notification_token}`
                .replace(`{${"report_notification_token"}}`, encodeURIComponent(String(reportNotificationToken !== undefined ? reportNotificationToken : `-report_notification_token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/report_notifications/{report_notification_token}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a ReportNotification.
         * @param {string} reportNotificationToken 
         * @param {PutReportNotifications} putReportNotifications 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReportNotification: async (reportNotificationToken: string, putReportNotifications: PutReportNotifications, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportNotificationToken' is not null or undefined
            assertParamExists('updateReportNotification', 'reportNotificationToken', reportNotificationToken)
            // verify required parameter 'putReportNotifications' is not null or undefined
            assertParamExists('updateReportNotification', 'putReportNotifications', putReportNotifications)
            const localVarPath = `/report_notifications/{report_notification_token}`
                .replace(`{${"report_notification_token"}}`, encodeURIComponent(String(reportNotificationToken !== undefined ? reportNotificationToken : `-report_notification_token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: putReportNotifications,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/report_notifications/{report_notification_token}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(putReportNotifications, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationsApi - functional programming interface
 * @export
 */
export const NotificationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a ReportNotification.
         * @param {NotificationsApiCreateReportNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReportNotification(requestParameters: NotificationsApiCreateReportNotificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportNotification>> {
            const postReportNotifications: PostReportNotifications = {
                title: requestParameters.title,
                cost_report_token: requestParameters.cost_report_token,
                workspace_token: requestParameters.workspace_token,
                user_tokens: requestParameters.user_tokens,
                recipient_channels: requestParameters.recipient_channels,
                frequency: requestParameters.frequency,
                change: requestParameters.change
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReportNotification(postReportNotifications, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a ReportNotification.
         * @param {NotificationsApiDeleteReportNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReportNotification(requestParameters: NotificationsApiDeleteReportNotificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportNotification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReportNotification(requestParameters.reportNotificationToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return all ReportNotifications.
         * @param {NotificationsApiGetAllReportNotificationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllReportNotifications(requestParameters: NotificationsApiGetAllReportNotificationsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportNotifications>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllReportNotifications(requestParameters.page, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return a ReportNotification.
         * @param {NotificationsApiGetReportNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReportNotification(requestParameters: NotificationsApiGetReportNotificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportNotification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReportNotification(requestParameters.reportNotificationToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a ReportNotification.
         * @param {NotificationsApiUpdateReportNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReportNotification(requestParameters: NotificationsApiUpdateReportNotificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportNotification>> {
            const putReportNotifications: PutReportNotifications = {
                title: requestParameters.title,
                cost_report_token: requestParameters.cost_report_token,
                user_tokens: requestParameters.user_tokens,
                recipient_channels: requestParameters.recipient_channels,
                frequency: requestParameters.frequency,
                change: requestParameters.change
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateReportNotification(requestParameters.reportNotificationToken, putReportNotifications, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationsApi - factory interface
 * @export
 */
export const NotificationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationsApiFp(configuration)
    return {
        /**
         * Create a ReportNotification.
         * @param {NotificationsApiCreateReportNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReportNotification(requestParameters: NotificationsApiCreateReportNotificationRequest, options?: AxiosRequestConfig): AxiosPromise<ReportNotification> {
            return localVarFp.createReportNotification(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a ReportNotification.
         * @param {NotificationsApiDeleteReportNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReportNotification(requestParameters: NotificationsApiDeleteReportNotificationRequest, options?: AxiosRequestConfig): AxiosPromise<ReportNotification> {
            return localVarFp.deleteReportNotification(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return all ReportNotifications.
         * @param {NotificationsApiGetAllReportNotificationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllReportNotifications(requestParameters: NotificationsApiGetAllReportNotificationsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ReportNotifications> {
            return localVarFp.getAllReportNotifications(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a ReportNotification.
         * @param {NotificationsApiGetReportNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportNotification(requestParameters: NotificationsApiGetReportNotificationRequest, options?: AxiosRequestConfig): AxiosPromise<ReportNotification> {
            return localVarFp.getReportNotification(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a ReportNotification.
         * @param {NotificationsApiUpdateReportNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReportNotification(requestParameters: NotificationsApiUpdateReportNotificationRequest, options?: AxiosRequestConfig): AxiosPromise<ReportNotification> {
            return localVarFp.updateReportNotification(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createReportNotification operation in NotificationsApi.
 * @export
 * @interface NotificationsApiCreateReportNotificationRequest
 */
export type NotificationsApiCreateReportNotificationRequest = {
    
} & PostReportNotifications

/**
 * Request parameters for deleteReportNotification operation in NotificationsApi.
 * @export
 * @interface NotificationsApiDeleteReportNotificationRequest
 */
export type NotificationsApiDeleteReportNotificationRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof NotificationsApiDeleteReportNotification
    */
    readonly reportNotificationToken: string
    
}

/**
 * Request parameters for getAllReportNotifications operation in NotificationsApi.
 * @export
 * @interface NotificationsApiGetAllReportNotificationsRequest
 */
export type NotificationsApiGetAllReportNotificationsRequest = {
    
    /**
    * The page of results to return.
    * @type {number}
    * @memberof NotificationsApiGetAllReportNotifications
    */
    readonly page?: number
    
    /**
    * The amount of results to return. The maximum is 1000.
    * @type {number}
    * @memberof NotificationsApiGetAllReportNotifications
    */
    readonly limit?: number
    
}

/**
 * Request parameters for getReportNotification operation in NotificationsApi.
 * @export
 * @interface NotificationsApiGetReportNotificationRequest
 */
export type NotificationsApiGetReportNotificationRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof NotificationsApiGetReportNotification
    */
    readonly reportNotificationToken: string
    
}

/**
 * Request parameters for updateReportNotification operation in NotificationsApi.
 * @export
 * @interface NotificationsApiUpdateReportNotificationRequest
 */
export type NotificationsApiUpdateReportNotificationRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof NotificationsApiUpdateReportNotification
    */
    readonly reportNotificationToken: string
    
} & PutReportNotifications

/**
 * NotificationsApiGenerated - object-oriented interface
 * @export
 * @class NotificationsApiGenerated
 * @extends {BaseAPI}
 */
export class NotificationsApiGenerated extends BaseAPI {
    /**
     * Create a ReportNotification.
     * @param {NotificationsApiCreateReportNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiGenerated
     */
    public createReportNotification(requestParameters: NotificationsApiCreateReportNotificationRequest, options?: AxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).createReportNotification(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a ReportNotification.
     * @param {NotificationsApiDeleteReportNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiGenerated
     */
    public deleteReportNotification(requestParameters: NotificationsApiDeleteReportNotificationRequest, options?: AxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).deleteReportNotification(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return all ReportNotifications.
     * @param {NotificationsApiGetAllReportNotificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiGenerated
     */
    public getAllReportNotifications(requestParameters: NotificationsApiGetAllReportNotificationsRequest = {}, options?: AxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).getAllReportNotifications(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a ReportNotification.
     * @param {NotificationsApiGetReportNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiGenerated
     */
    public getReportNotification(requestParameters: NotificationsApiGetReportNotificationRequest, options?: AxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).getReportNotification(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a ReportNotification.
     * @param {NotificationsApiUpdateReportNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiGenerated
     */
    public updateReportNotification(requestParameters: NotificationsApiUpdateReportNotificationRequest, options?: AxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).updateReportNotification(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

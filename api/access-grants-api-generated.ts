/* tslint:disable */
/* eslint-disable */
/*
Vantage

Vantage API

The version of the OpenAPI document: 2.0.0
Contact: support@vantage.sh

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccessGrant } from '../models';
// @ts-ignore
import { AccessGrants } from '../models';
// @ts-ignore
import { Errors } from '../models';
// @ts-ignore
import { PostAccessGrants } from '../models';
// @ts-ignore
import { PutAccessGrants } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AccessGrantsApi - axios parameter creator
 * @export
 */
export const AccessGrantsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an Access Grant.
         * @param {PostAccessGrants} postAccessGrants 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGrant: async (postAccessGrants: PostAccessGrants, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postAccessGrants' is not null or undefined
            assertParamExists('createGrant', 'postAccessGrants', postAccessGrants)
            const localVarPath = `/access_grants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: postAccessGrants,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/access_grants',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(postAccessGrants, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an Access Grant.
         * @param {string} accessGrantToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete: async (accessGrantToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accessGrantToken' is not null or undefined
            assertParamExists('delete', 'accessGrantToken', accessGrantToken)
            const localVarPath = `/access_grants/{access_grant_token}`
                .replace(`{${"access_grant_token"}}`, encodeURIComponent(String(accessGrantToken !== undefined ? accessGrantToken : `-access_grant_token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["write"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/access_grants/{access_grant_token}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a specific Access Grant.
         * @param {string} accessGrantToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificGrant: async (accessGrantToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accessGrantToken' is not null or undefined
            assertParamExists('getSpecificGrant', 'accessGrantToken', accessGrantToken)
            const localVarPath = `/access_grants/{access_grant_token}`
                .replace(`{${"access_grant_token"}}`, encodeURIComponent(String(accessGrantToken !== undefined ? accessGrantToken : `-access_grant_token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/access_grants/{access_grant_token}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return all Access Grants that the current API token has access to.
         * @param {number} [page] The page of results to return.
         * @param {number} [limit] The amount of results to return. The maximum is 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccessible: async (page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/access_grants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["read"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/access_grants',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an AccessGrant.
         * @param {string} accessGrantToken 
         * @param {PutAccessGrants} putAccessGrants 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGrantToken: async (accessGrantToken: string, putAccessGrants: PutAccessGrants, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accessGrantToken' is not null or undefined
            assertParamExists('updateGrantToken', 'accessGrantToken', accessGrantToken)
            // verify required parameter 'putAccessGrants' is not null or undefined
            assertParamExists('updateGrantToken', 'putAccessGrants', putAccessGrants)
            const localVarPath = `/access_grants/{access_grant_token}`
                .replace(`{${"access_grant_token"}}`, encodeURIComponent(String(accessGrantToken !== undefined ? accessGrantToken : `-access_grant_token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: putAccessGrants,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/access_grants/{access_grant_token}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(putAccessGrants, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccessGrantsApi - functional programming interface
 * @export
 */
export const AccessGrantsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccessGrantsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create an Access Grant.
         * @param {AccessGrantsApiCreateGrantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGrant(requestParameters: AccessGrantsApiCreateGrantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessGrant>> {
            const postAccessGrants: PostAccessGrants = {
                resource_token: requestParameters.resource_token,
                team_token: requestParameters.team_token,
                access: requestParameters.access
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGrant(postAccessGrants, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an Access Grant.
         * @param {AccessGrantsApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete(requestParameters: AccessGrantsApiDeleteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessGrant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete(requestParameters.accessGrantToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return a specific Access Grant.
         * @param {AccessGrantsApiGetSpecificGrantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificGrant(requestParameters: AccessGrantsApiGetSpecificGrantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessGrant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificGrant(requestParameters.accessGrantToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return all Access Grants that the current API token has access to.
         * @param {AccessGrantsApiListAccessibleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccessible(requestParameters: AccessGrantsApiListAccessibleRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessGrants>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAccessible(requestParameters.page, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an AccessGrant.
         * @param {AccessGrantsApiUpdateGrantTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGrantToken(requestParameters: AccessGrantsApiUpdateGrantTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessGrant>> {
            const putAccessGrants: PutAccessGrants = {
                access: requestParameters.access
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGrantToken(requestParameters.accessGrantToken, putAccessGrants, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccessGrantsApi - factory interface
 * @export
 */
export const AccessGrantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccessGrantsApiFp(configuration)
    return {
        /**
         * Create an Access Grant.
         * @param {AccessGrantsApiCreateGrantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGrant(requestParameters: AccessGrantsApiCreateGrantRequest, options?: AxiosRequestConfig): AxiosPromise<AccessGrant> {
            return localVarFp.createGrant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Access Grant.
         * @param {AccessGrantsApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete(requestParameters: AccessGrantsApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<AccessGrant> {
            return localVarFp.delete(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a specific Access Grant.
         * @param {AccessGrantsApiGetSpecificGrantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificGrant(requestParameters: AccessGrantsApiGetSpecificGrantRequest, options?: AxiosRequestConfig): AxiosPromise<AccessGrant> {
            return localVarFp.getSpecificGrant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return all Access Grants that the current API token has access to.
         * @param {AccessGrantsApiListAccessibleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccessible(requestParameters: AccessGrantsApiListAccessibleRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AccessGrants> {
            return localVarFp.listAccessible(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an AccessGrant.
         * @param {AccessGrantsApiUpdateGrantTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGrantToken(requestParameters: AccessGrantsApiUpdateGrantTokenRequest, options?: AxiosRequestConfig): AxiosPromise<AccessGrant> {
            return localVarFp.updateGrantToken(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createGrant operation in AccessGrantsApi.
 * @export
 * @interface AccessGrantsApiCreateGrantRequest
 */
export type AccessGrantsApiCreateGrantRequest = {
    
} & PostAccessGrants

/**
 * Request parameters for delete operation in AccessGrantsApi.
 * @export
 * @interface AccessGrantsApiDeleteRequest
 */
export type AccessGrantsApiDeleteRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AccessGrantsApiDelete
    */
    readonly accessGrantToken: string
    
}

/**
 * Request parameters for getSpecificGrant operation in AccessGrantsApi.
 * @export
 * @interface AccessGrantsApiGetSpecificGrantRequest
 */
export type AccessGrantsApiGetSpecificGrantRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AccessGrantsApiGetSpecificGrant
    */
    readonly accessGrantToken: string
    
}

/**
 * Request parameters for listAccessible operation in AccessGrantsApi.
 * @export
 * @interface AccessGrantsApiListAccessibleRequest
 */
export type AccessGrantsApiListAccessibleRequest = {
    
    /**
    * The page of results to return.
    * @type {number}
    * @memberof AccessGrantsApiListAccessible
    */
    readonly page?: number
    
    /**
    * The amount of results to return. The maximum is 1000.
    * @type {number}
    * @memberof AccessGrantsApiListAccessible
    */
    readonly limit?: number
    
}

/**
 * Request parameters for updateGrantToken operation in AccessGrantsApi.
 * @export
 * @interface AccessGrantsApiUpdateGrantTokenRequest
 */
export type AccessGrantsApiUpdateGrantTokenRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AccessGrantsApiUpdateGrantToken
    */
    readonly accessGrantToken: string
    
} & PutAccessGrants

/**
 * AccessGrantsApiGenerated - object-oriented interface
 * @export
 * @class AccessGrantsApiGenerated
 * @extends {BaseAPI}
 */
export class AccessGrantsApiGenerated extends BaseAPI {
    /**
     * Create an Access Grant.
     * @param {AccessGrantsApiCreateGrantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessGrantsApiGenerated
     */
    public createGrant(requestParameters: AccessGrantsApiCreateGrantRequest, options?: AxiosRequestConfig) {
        return AccessGrantsApiFp(this.configuration).createGrant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an Access Grant.
     * @param {AccessGrantsApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessGrantsApiGenerated
     */
    public delete(requestParameters: AccessGrantsApiDeleteRequest, options?: AxiosRequestConfig) {
        return AccessGrantsApiFp(this.configuration).delete(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a specific Access Grant.
     * @param {AccessGrantsApiGetSpecificGrantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessGrantsApiGenerated
     */
    public getSpecificGrant(requestParameters: AccessGrantsApiGetSpecificGrantRequest, options?: AxiosRequestConfig) {
        return AccessGrantsApiFp(this.configuration).getSpecificGrant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return all Access Grants that the current API token has access to.
     * @param {AccessGrantsApiListAccessibleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessGrantsApiGenerated
     */
    public listAccessible(requestParameters: AccessGrantsApiListAccessibleRequest = {}, options?: AxiosRequestConfig) {
        return AccessGrantsApiFp(this.configuration).listAccessible(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an AccessGrant.
     * @param {AccessGrantsApiUpdateGrantTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessGrantsApiGenerated
     */
    public updateGrantToken(requestParameters: AccessGrantsApiUpdateGrantTokenRequest, options?: AxiosRequestConfig) {
        return AccessGrantsApiFp(this.configuration).updateGrantToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

/* tslint:disable */
/* eslint-disable */
/*
Vantage

Vantage API

The version of the OpenAPI document: 2.0.0
Contact: support@vantage.sh

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CostReport } from '../models';
// @ts-ignore
import { CostReports } from '../models';
// @ts-ignore
import { Costs } from '../models';
// @ts-ignore
import { Dashboard } from '../models';
// @ts-ignore
import { Dashboards } from '../models';
// @ts-ignore
import { Errors } from '../models';
// @ts-ignore
import { PostCostReports } from '../models';
// @ts-ignore
import { PostCostReportsBusinessMetricTokensWithMetadataInner } from '../models';
// @ts-ignore
import { PostCostReportsSettings } from '../models';
// @ts-ignore
import { PostDashboards } from '../models';
// @ts-ignore
import { PutCostReports } from '../models';
// @ts-ignore
import { PutCostReportsBusinessMetricTokensWithMetadataInner } from '../models';
// @ts-ignore
import { PutCostReportsSettings } from '../models';
// @ts-ignore
import { PutDashboards } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CostsApi - axios parameter creator
 * @export
 */
export const CostsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a Dashboard.
         * @param {PostDashboards} postDashboards 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboard: async (postDashboards: PostDashboards, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postDashboards' is not null or undefined
            assertParamExists('createDashboard', 'postDashboards', postDashboards)
            const localVarPath = `/dashboards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: postDashboards,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/dashboards',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(postDashboards, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a CostReport.
         * @param {PostCostReports} postCostReports 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReport: async (postCostReports: PostCostReports, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postCostReports' is not null or undefined
            assertParamExists('createReport', 'postCostReports', postCostReports)
            const localVarPath = `/cost_reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: postCostReports,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cost_reports',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(postCostReports, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a CostReport.
         * @param {string} costReportToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCostReport: async (costReportToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'costReportToken' is not null or undefined
            assertParamExists('deleteCostReport', 'costReportToken', costReportToken)
            const localVarPath = `/cost_reports/{cost_report_token}`
                .replace(`{${"cost_report_token"}}`, encodeURIComponent(String(costReportToken !== undefined ? costReportToken : `-cost_report_token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["write"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cost_reports/{cost_report_token}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Dashboard.
         * @param {string} dashboardToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboard: async (dashboardToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardToken' is not null or undefined
            assertParamExists('deleteDashboard', 'dashboardToken', dashboardToken)
            const localVarPath = `/dashboards/{dashboard_token}`
                .replace(`{${"dashboard_token"}}`, encodeURIComponent(String(dashboardToken !== undefined ? dashboardToken : `-dashboard_token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["write"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/dashboards/{dashboard_token}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return all Dashboards.
         * @param {number} [page] The page of results to return.
         * @param {number} [limit] The amount of results to return. The maximum is 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dashboards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["read"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/dashboards',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return all CostReports.
         * @param {number} [page] The page of results to return.
         * @param {number} [limit] The amount of results to return. The maximum is 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCostReports: async (page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cost_reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["read"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cost_reports',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a CostReport.
         * @param {string} costReportToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCostReport: async (costReportToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'costReportToken' is not null or undefined
            assertParamExists('getCostReport', 'costReportToken', costReportToken)
            const localVarPath = `/cost_reports/{cost_report_token}`
                .replace(`{${"cost_report_token"}}`, encodeURIComponent(String(costReportToken !== undefined ? costReportToken : `-cost_report_token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cost_reports/{cost_report_token}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a specific Dashboard.
         * @param {string} dashboardToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificDashboard: async (dashboardToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardToken' is not null or undefined
            assertParamExists('getSpecificDashboard', 'dashboardToken', dashboardToken)
            const localVarPath = `/dashboards/{dashboard_token}`
                .replace(`{${"dashboard_token"}}`, encodeURIComponent(String(dashboardToken !== undefined ? dashboardToken : `-dashboard_token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/dashboards/{dashboard_token}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return all Costs for a CostReport.
         * @param {string} costReportToken The CostReport token.
         * @param {string} [startDate] First date you would like to filter costs from. ISO 8601 formatted.
         * @param {string} [endDate] Last date you would like to filter costs to. ISO 8601 formatted.
         * @param {Array<string>} [groupings] Group the results by specific field(s). Defaults to provider, service, account_id. Valid groupings: account_id, billing_account_id, charge_type, cost_category, cost_subcategory, provider, region, resource_id, service, tagged, tag:&lt;tag_value&gt;. If providing multiple groupings, join as comma separated values: groupings&#x3D;provider,service,region
         * @param {'asc' | 'desc'} [order] Whether to order costs by date in an ascending or descending manner.
         * @param {number} [limit] The amount of results to return. The maximum is 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCostReport: async (costReportToken: string, startDate?: string, endDate?: string, groupings?: Array<string>, order?: 'asc' | 'desc', limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'costReportToken' is not null or undefined
            assertParamExists('listCostReport', 'costReportToken', costReportToken)
            const localVarPath = `/costs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["read"], configuration)
            if (costReportToken !== undefined) {
                localVarQueryParameter['cost_report_token'] = costReportToken;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }

            if (groupings) {
                localVarQueryParameter['groupings'] = groupings.join(COLLECTION_FORMATS.csv);
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/costs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Dashboard.
         * @param {string} dashboardToken 
         * @param {PutDashboards} putDashboards 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDashboard: async (dashboardToken: string, putDashboards: PutDashboards, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardToken' is not null or undefined
            assertParamExists('updateDashboard', 'dashboardToken', dashboardToken)
            // verify required parameter 'putDashboards' is not null or undefined
            assertParamExists('updateDashboard', 'putDashboards', putDashboards)
            const localVarPath = `/dashboards/{dashboard_token}`
                .replace(`{${"dashboard_token"}}`, encodeURIComponent(String(dashboardToken !== undefined ? dashboardToken : `-dashboard_token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: putDashboards,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/dashboards/{dashboard_token}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(putDashboards, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a CostReport.
         * @param {string} costReportToken 
         * @param {PutCostReports} putCostReports 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReport: async (costReportToken: string, putCostReports: PutCostReports, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'costReportToken' is not null or undefined
            assertParamExists('updateReport', 'costReportToken', costReportToken)
            // verify required parameter 'putCostReports' is not null or undefined
            assertParamExists('updateReport', 'putCostReports', putCostReports)
            const localVarPath = `/cost_reports/{cost_report_token}`
                .replace(`{${"cost_report_token"}}`, encodeURIComponent(String(costReportToken !== undefined ? costReportToken : `-cost_report_token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: putCostReports,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/cost_reports/{cost_report_token}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(putCostReports, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CostsApi - functional programming interface
 * @export
 */
export const CostsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CostsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a Dashboard.
         * @param {CostsApiCreateDashboardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDashboard(requestParameters: CostsApiCreateDashboardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dashboard>> {
            const postDashboards: PostDashboards = {
                title: requestParameters.title,
                widget_tokens: requestParameters.widget_tokens,
                saved_filter_tokens: requestParameters.saved_filter_tokens,
                date_bin: requestParameters.date_bin,
                date_interval: requestParameters.date_interval,
                start_date: requestParameters.start_date,
                end_date: requestParameters.end_date,
                workspace_token: requestParameters.workspace_token
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDashboard(postDashboards, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a CostReport.
         * @param {CostsApiCreateReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReport(requestParameters: CostsApiCreateReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CostReport>> {
            const postCostReports: PostCostReports = {
                title: requestParameters.title,
                workspace_token: requestParameters.workspace_token,
                groupings: requestParameters.groupings,
                filter: requestParameters.filter,
                saved_filter_tokens: requestParameters.saved_filter_tokens,
                business_metric_tokens_with_metadata: requestParameters.business_metric_tokens_with_metadata,
                folder_token: requestParameters.folder_token,
                settings: requestParameters.settings
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReport(postCostReports, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a CostReport.
         * @param {CostsApiDeleteCostReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCostReport(requestParameters: CostsApiDeleteCostReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CostReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCostReport(requestParameters.costReportToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Dashboard.
         * @param {CostsApiDeleteDashboardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDashboard(requestParameters: CostsApiDeleteDashboardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dashboard>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDashboard(requestParameters.dashboardToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return all Dashboards.
         * @param {CostsApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(requestParameters: CostsApiGetAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dashboards>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(requestParameters.page, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return all CostReports.
         * @param {CostsApiGetAllCostReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCostReports(requestParameters: CostsApiGetAllCostReportsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CostReports>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCostReports(requestParameters.page, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return a CostReport.
         * @param {CostsApiGetCostReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCostReport(requestParameters: CostsApiGetCostReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CostReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCostReport(requestParameters.costReportToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return a specific Dashboard.
         * @param {CostsApiGetSpecificDashboardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificDashboard(requestParameters: CostsApiGetSpecificDashboardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dashboard>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificDashboard(requestParameters.dashboardToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return all Costs for a CostReport.
         * @param {CostsApiListCostReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCostReport(requestParameters: CostsApiListCostReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Costs>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCostReport(requestParameters.costReportToken, requestParameters.startDate, requestParameters.endDate, requestParameters.groupings, requestParameters.order, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a Dashboard.
         * @param {CostsApiUpdateDashboardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDashboard(requestParameters: CostsApiUpdateDashboardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dashboard>> {
            const putDashboards: PutDashboards = {
                title: requestParameters.title,
                widget_tokens: requestParameters.widget_tokens,
                saved_filter_tokens: requestParameters.saved_filter_tokens,
                date_bin: requestParameters.date_bin,
                date_interval: requestParameters.date_interval,
                start_date: requestParameters.start_date,
                end_date: requestParameters.end_date
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDashboard(requestParameters.dashboardToken, putDashboards, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a CostReport.
         * @param {CostsApiUpdateReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReport(requestParameters: CostsApiUpdateReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CostReport>> {
            const putCostReports: PutCostReports = {
                title: requestParameters.title,
                groupings: requestParameters.groupings,
                filter: requestParameters.filter,
                saved_filter_tokens: requestParameters.saved_filter_tokens,
                business_metric_tokens_with_metadata: requestParameters.business_metric_tokens_with_metadata,
                folder_token: requestParameters.folder_token,
                settings: requestParameters.settings
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateReport(requestParameters.costReportToken, putCostReports, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CostsApi - factory interface
 * @export
 */
export const CostsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CostsApiFp(configuration)
    return {
        /**
         * Create a Dashboard.
         * @param {CostsApiCreateDashboardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboard(requestParameters: CostsApiCreateDashboardRequest, options?: AxiosRequestConfig): AxiosPromise<Dashboard> {
            return localVarFp.createDashboard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a CostReport.
         * @param {CostsApiCreateReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReport(requestParameters: CostsApiCreateReportRequest, options?: AxiosRequestConfig): AxiosPromise<CostReport> {
            return localVarFp.createReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a CostReport.
         * @param {CostsApiDeleteCostReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCostReport(requestParameters: CostsApiDeleteCostReportRequest, options?: AxiosRequestConfig): AxiosPromise<CostReport> {
            return localVarFp.deleteCostReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Dashboard.
         * @param {CostsApiDeleteDashboardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboard(requestParameters: CostsApiDeleteDashboardRequest, options?: AxiosRequestConfig): AxiosPromise<Dashboard> {
            return localVarFp.deleteDashboard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return all Dashboards.
         * @param {CostsApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(requestParameters: CostsApiGetAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Dashboards> {
            return localVarFp.getAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return all CostReports.
         * @param {CostsApiGetAllCostReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCostReports(requestParameters: CostsApiGetAllCostReportsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CostReports> {
            return localVarFp.getAllCostReports(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a CostReport.
         * @param {CostsApiGetCostReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCostReport(requestParameters: CostsApiGetCostReportRequest, options?: AxiosRequestConfig): AxiosPromise<CostReport> {
            return localVarFp.getCostReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a specific Dashboard.
         * @param {CostsApiGetSpecificDashboardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificDashboard(requestParameters: CostsApiGetSpecificDashboardRequest, options?: AxiosRequestConfig): AxiosPromise<Dashboard> {
            return localVarFp.getSpecificDashboard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return all Costs for a CostReport.
         * @param {CostsApiListCostReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCostReport(requestParameters: CostsApiListCostReportRequest, options?: AxiosRequestConfig): AxiosPromise<Costs> {
            return localVarFp.listCostReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Dashboard.
         * @param {CostsApiUpdateDashboardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDashboard(requestParameters: CostsApiUpdateDashboardRequest, options?: AxiosRequestConfig): AxiosPromise<Dashboard> {
            return localVarFp.updateDashboard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a CostReport.
         * @param {CostsApiUpdateReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReport(requestParameters: CostsApiUpdateReportRequest, options?: AxiosRequestConfig): AxiosPromise<CostReport> {
            return localVarFp.updateReport(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createDashboard operation in CostsApi.
 * @export
 * @interface CostsApiCreateDashboardRequest
 */
export type CostsApiCreateDashboardRequest = {
    
} & PostDashboards

/**
 * Request parameters for createReport operation in CostsApi.
 * @export
 * @interface CostsApiCreateReportRequest
 */
export type CostsApiCreateReportRequest = {
    
} & PostCostReports

/**
 * Request parameters for deleteCostReport operation in CostsApi.
 * @export
 * @interface CostsApiDeleteCostReportRequest
 */
export type CostsApiDeleteCostReportRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CostsApiDeleteCostReport
    */
    readonly costReportToken: string
    
}

/**
 * Request parameters for deleteDashboard operation in CostsApi.
 * @export
 * @interface CostsApiDeleteDashboardRequest
 */
export type CostsApiDeleteDashboardRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CostsApiDeleteDashboard
    */
    readonly dashboardToken: string
    
}

/**
 * Request parameters for getAll operation in CostsApi.
 * @export
 * @interface CostsApiGetAllRequest
 */
export type CostsApiGetAllRequest = {
    
    /**
    * The page of results to return.
    * @type {number}
    * @memberof CostsApiGetAll
    */
    readonly page?: number
    
    /**
    * The amount of results to return. The maximum is 1000.
    * @type {number}
    * @memberof CostsApiGetAll
    */
    readonly limit?: number
    
}

/**
 * Request parameters for getAllCostReports operation in CostsApi.
 * @export
 * @interface CostsApiGetAllCostReportsRequest
 */
export type CostsApiGetAllCostReportsRequest = {
    
    /**
    * The page of results to return.
    * @type {number}
    * @memberof CostsApiGetAllCostReports
    */
    readonly page?: number
    
    /**
    * The amount of results to return. The maximum is 1000.
    * @type {number}
    * @memberof CostsApiGetAllCostReports
    */
    readonly limit?: number
    
}

/**
 * Request parameters for getCostReport operation in CostsApi.
 * @export
 * @interface CostsApiGetCostReportRequest
 */
export type CostsApiGetCostReportRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CostsApiGetCostReport
    */
    readonly costReportToken: string
    
}

/**
 * Request parameters for getSpecificDashboard operation in CostsApi.
 * @export
 * @interface CostsApiGetSpecificDashboardRequest
 */
export type CostsApiGetSpecificDashboardRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CostsApiGetSpecificDashboard
    */
    readonly dashboardToken: string
    
}

/**
 * Request parameters for listCostReport operation in CostsApi.
 * @export
 * @interface CostsApiListCostReportRequest
 */
export type CostsApiListCostReportRequest = {
    
    /**
    * The CostReport token.
    * @type {string}
    * @memberof CostsApiListCostReport
    */
    readonly costReportToken: string
    
    /**
    * First date you would like to filter costs from. ISO 8601 formatted.
    * @type {string}
    * @memberof CostsApiListCostReport
    */
    readonly startDate?: string
    
    /**
    * Last date you would like to filter costs to. ISO 8601 formatted.
    * @type {string}
    * @memberof CostsApiListCostReport
    */
    readonly endDate?: string
    
    /**
    * Group the results by specific field(s). Defaults to provider, service, account_id. Valid groupings: account_id, billing_account_id, charge_type, cost_category, cost_subcategory, provider, region, resource_id, service, tagged, tag:<tag_value>. If providing multiple groupings, join as comma separated values: groupings=provider,service,region
    * @type {Array<string>}
    * @memberof CostsApiListCostReport
    */
    readonly groupings?: Array<string>
    
    /**
    * Whether to order costs by date in an ascending or descending manner.
    * @type {'asc' | 'desc'}
    * @memberof CostsApiListCostReport
    */
    readonly order?: 'asc' | 'desc'
    
    /**
    * The amount of results to return. The maximum is 1000.
    * @type {number}
    * @memberof CostsApiListCostReport
    */
    readonly limit?: number
    
}

/**
 * Request parameters for updateDashboard operation in CostsApi.
 * @export
 * @interface CostsApiUpdateDashboardRequest
 */
export type CostsApiUpdateDashboardRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CostsApiUpdateDashboard
    */
    readonly dashboardToken: string
    
} & PutDashboards

/**
 * Request parameters for updateReport operation in CostsApi.
 * @export
 * @interface CostsApiUpdateReportRequest
 */
export type CostsApiUpdateReportRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CostsApiUpdateReport
    */
    readonly costReportToken: string
    
} & PutCostReports

/**
 * CostsApiGenerated - object-oriented interface
 * @export
 * @class CostsApiGenerated
 * @extends {BaseAPI}
 */
export class CostsApiGenerated extends BaseAPI {
    /**
     * Create a Dashboard.
     * @param {CostsApiCreateDashboardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostsApiGenerated
     */
    public createDashboard(requestParameters: CostsApiCreateDashboardRequest, options?: AxiosRequestConfig) {
        return CostsApiFp(this.configuration).createDashboard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a CostReport.
     * @param {CostsApiCreateReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostsApiGenerated
     */
    public createReport(requestParameters: CostsApiCreateReportRequest, options?: AxiosRequestConfig) {
        return CostsApiFp(this.configuration).createReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a CostReport.
     * @param {CostsApiDeleteCostReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostsApiGenerated
     */
    public deleteCostReport(requestParameters: CostsApiDeleteCostReportRequest, options?: AxiosRequestConfig) {
        return CostsApiFp(this.configuration).deleteCostReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Dashboard.
     * @param {CostsApiDeleteDashboardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostsApiGenerated
     */
    public deleteDashboard(requestParameters: CostsApiDeleteDashboardRequest, options?: AxiosRequestConfig) {
        return CostsApiFp(this.configuration).deleteDashboard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return all Dashboards.
     * @param {CostsApiGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostsApiGenerated
     */
    public getAll(requestParameters: CostsApiGetAllRequest = {}, options?: AxiosRequestConfig) {
        return CostsApiFp(this.configuration).getAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return all CostReports.
     * @param {CostsApiGetAllCostReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostsApiGenerated
     */
    public getAllCostReports(requestParameters: CostsApiGetAllCostReportsRequest = {}, options?: AxiosRequestConfig) {
        return CostsApiFp(this.configuration).getAllCostReports(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a CostReport.
     * @param {CostsApiGetCostReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostsApiGenerated
     */
    public getCostReport(requestParameters: CostsApiGetCostReportRequest, options?: AxiosRequestConfig) {
        return CostsApiFp(this.configuration).getCostReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a specific Dashboard.
     * @param {CostsApiGetSpecificDashboardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostsApiGenerated
     */
    public getSpecificDashboard(requestParameters: CostsApiGetSpecificDashboardRequest, options?: AxiosRequestConfig) {
        return CostsApiFp(this.configuration).getSpecificDashboard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return all Costs for a CostReport.
     * @param {CostsApiListCostReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostsApiGenerated
     */
    public listCostReport(requestParameters: CostsApiListCostReportRequest, options?: AxiosRequestConfig) {
        return CostsApiFp(this.configuration).listCostReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a Dashboard.
     * @param {CostsApiUpdateDashboardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostsApiGenerated
     */
    public updateDashboard(requestParameters: CostsApiUpdateDashboardRequest, options?: AxiosRequestConfig) {
        return CostsApiFp(this.configuration).updateDashboard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a CostReport.
     * @param {CostsApiUpdateReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CostsApiGenerated
     */
    public updateReport(requestParameters: CostsApiUpdateReportRequest, options?: AxiosRequestConfig) {
        return CostsApiFp(this.configuration).updateReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

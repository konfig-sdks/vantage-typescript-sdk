/* tslint:disable */
/* eslint-disable */
/*
Vantage

Vantage API

The version of the OpenAPI document: 2.0.0
Contact: support@vantage.sh

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Price } from '../models';
// @ts-ignore
import { Prices } from '../models';
// @ts-ignore
import { Product } from '../models';
// @ts-ignore
import { Products } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PricesApi - axios parameter creator
 * @export
 */
export const PricesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return a product
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProduct', 'id', id)
            const localVarPath = `/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/products/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a price
         * @param {string} productId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductPrice: async (productId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getProductPrice', 'productId', productId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProductPrice', 'id', id)
            const localVarPath = `/products/{product_id}/prices/{id}`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId !== undefined ? productId : `-product_id-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/products/{product_id}/prices/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return available Prices across all Regions for a Product.
         * @param {string} productId 
         * @param {number} [page] The page of results to return.
         * @param {number} [limit] The amount of results to return. The maximum is 1000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductPrices: async (productId: string, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getProductPrices', 'productId', productId)
            const localVarPath = `/products/{product_id}/prices`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId !== undefined ? productId : `-product_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["read"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/products/{product_id}/prices',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return available Products for a Service. For example, with a Provider of AWS and a Service of EC2, Products will be a list of all EC2 Instances. By default, this endpoint returns all Products across all Services and Providers but has optional query parameters for filtering listed below.
         * @param {string} [providerId] Query by Provider to list all Products across all Services for a Provider. e.g. aws
         * @param {string} [serviceId] Query by Service to list all Products for a specific provider service. e.g. aws-ec2
         * @param {string} [name] Query by name of the Product to see a list of products which match that name. e.g. m5a.16xlarge
         * @param {number} [page] The page of results to return.
         * @param {number} [limit] The amount of results to return. The maximum is 1000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailableProducts: async (providerId?: string, serviceId?: string, name?: string, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["read"], configuration)
            if (providerId !== undefined) {
                localVarQueryParameter['provider_id'] = providerId;
            }

            if (serviceId !== undefined) {
                localVarQueryParameter['service_id'] = serviceId;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/products',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PricesApi - functional programming interface
 * @export
 */
export const PricesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PricesApiAxiosParamCreator(configuration)
    return {
        /**
         * Return a product
         * @param {PricesApiGetProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProduct(requestParameters: PricesApiGetProductRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProduct(requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a price
         * @param {PricesApiGetProductPriceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductPrice(requestParameters: PricesApiGetProductPriceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Price>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductPrice(requestParameters.productId, requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return available Prices across all Regions for a Product.
         * @param {PricesApiGetProductPricesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductPrices(requestParameters: PricesApiGetProductPricesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Prices>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductPrices(requestParameters.productId, requestParameters.page, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return available Products for a Service. For example, with a Provider of AWS and a Service of EC2, Products will be a list of all EC2 Instances. By default, this endpoint returns all Products across all Services and Providers but has optional query parameters for filtering listed below.
         * @param {PricesApiListAvailableProductsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAvailableProducts(requestParameters: PricesApiListAvailableProductsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Products>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAvailableProducts(requestParameters.providerId, requestParameters.serviceId, requestParameters.name, requestParameters.page, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PricesApi - factory interface
 * @export
 */
export const PricesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PricesApiFp(configuration)
    return {
        /**
         * Return a product
         * @param {PricesApiGetProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct(requestParameters: PricesApiGetProductRequest, options?: AxiosRequestConfig): AxiosPromise<Product> {
            return localVarFp.getProduct(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a price
         * @param {PricesApiGetProductPriceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductPrice(requestParameters: PricesApiGetProductPriceRequest, options?: AxiosRequestConfig): AxiosPromise<Price> {
            return localVarFp.getProductPrice(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return available Prices across all Regions for a Product.
         * @param {PricesApiGetProductPricesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductPrices(requestParameters: PricesApiGetProductPricesRequest, options?: AxiosRequestConfig): AxiosPromise<Prices> {
            return localVarFp.getProductPrices(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return available Products for a Service. For example, with a Provider of AWS and a Service of EC2, Products will be a list of all EC2 Instances. By default, this endpoint returns all Products across all Services and Providers but has optional query parameters for filtering listed below.
         * @param {PricesApiListAvailableProductsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailableProducts(requestParameters: PricesApiListAvailableProductsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Products> {
            return localVarFp.listAvailableProducts(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getProduct operation in PricesApi.
 * @export
 * @interface PricesApiGetProductRequest
 */
export type PricesApiGetProductRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PricesApiGetProduct
    */
    readonly id: string
    
}

/**
 * Request parameters for getProductPrice operation in PricesApi.
 * @export
 * @interface PricesApiGetProductPriceRequest
 */
export type PricesApiGetProductPriceRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PricesApiGetProductPrice
    */
    readonly productId: string
    
    /**
    * 
    * @type {string}
    * @memberof PricesApiGetProductPrice
    */
    readonly id: string
    
}

/**
 * Request parameters for getProductPrices operation in PricesApi.
 * @export
 * @interface PricesApiGetProductPricesRequest
 */
export type PricesApiGetProductPricesRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PricesApiGetProductPrices
    */
    readonly productId: string
    
    /**
    * The page of results to return.
    * @type {number}
    * @memberof PricesApiGetProductPrices
    */
    readonly page?: number
    
    /**
    * The amount of results to return. The maximum is 1000
    * @type {number}
    * @memberof PricesApiGetProductPrices
    */
    readonly limit?: number
    
}

/**
 * Request parameters for listAvailableProducts operation in PricesApi.
 * @export
 * @interface PricesApiListAvailableProductsRequest
 */
export type PricesApiListAvailableProductsRequest = {
    
    /**
    * Query by Provider to list all Products across all Services for a Provider. e.g. aws
    * @type {string}
    * @memberof PricesApiListAvailableProducts
    */
    readonly providerId?: string
    
    /**
    * Query by Service to list all Products for a specific provider service. e.g. aws-ec2
    * @type {string}
    * @memberof PricesApiListAvailableProducts
    */
    readonly serviceId?: string
    
    /**
    * Query by name of the Product to see a list of products which match that name. e.g. m5a.16xlarge
    * @type {string}
    * @memberof PricesApiListAvailableProducts
    */
    readonly name?: string
    
    /**
    * The page of results to return.
    * @type {number}
    * @memberof PricesApiListAvailableProducts
    */
    readonly page?: number
    
    /**
    * The amount of results to return. The maximum is 1000
    * @type {number}
    * @memberof PricesApiListAvailableProducts
    */
    readonly limit?: number
    
}

/**
 * PricesApiGenerated - object-oriented interface
 * @export
 * @class PricesApiGenerated
 * @extends {BaseAPI}
 */
export class PricesApiGenerated extends BaseAPI {
    /**
     * Return a product
     * @param {PricesApiGetProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricesApiGenerated
     */
    public getProduct(requestParameters: PricesApiGetProductRequest, options?: AxiosRequestConfig) {
        return PricesApiFp(this.configuration).getProduct(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a price
     * @param {PricesApiGetProductPriceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricesApiGenerated
     */
    public getProductPrice(requestParameters: PricesApiGetProductPriceRequest, options?: AxiosRequestConfig) {
        return PricesApiFp(this.configuration).getProductPrice(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return available Prices across all Regions for a Product.
     * @param {PricesApiGetProductPricesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricesApiGenerated
     */
    public getProductPrices(requestParameters: PricesApiGetProductPricesRequest, options?: AxiosRequestConfig) {
        return PricesApiFp(this.configuration).getProductPrices(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return available Products for a Service. For example, with a Provider of AWS and a Service of EC2, Products will be a list of all EC2 Instances. By default, this endpoint returns all Products across all Services and Providers but has optional query parameters for filtering listed below.
     * @param {PricesApiListAvailableProductsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricesApiGenerated
     */
    public listAvailableProducts(requestParameters: PricesApiListAvailableProductsRequest = {}, options?: AxiosRequestConfig) {
        return PricesApiFp(this.configuration).listAvailableProducts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

/* tslint:disable */
/* eslint-disable */
/*
Vantage

Vantage API

The version of the OpenAPI document: 2.0.0
Contact: support@vantage.sh

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Errors } from '../models';
// @ts-ignore
import { PostSavedFilters } from '../models';
// @ts-ignore
import { PutSavedFilters } from '../models';
// @ts-ignore
import { SavedFilter } from '../models';
// @ts-ignore
import { SavedFilters } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FiltersApi - axios parameter creator
 * @export
 */
export const FiltersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a SavedFilter for CostReports.
         * @param {PostSavedFilters} postSavedFilters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSavedFilterForCostReports: async (postSavedFilters: PostSavedFilters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postSavedFilters' is not null or undefined
            assertParamExists('createSavedFilterForCostReports', 'postSavedFilters', postSavedFilters)
            const localVarPath = `/saved_filters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: postSavedFilters,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/saved_filters',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(postSavedFilters, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a SavedFilter for CostReports.
         * @param {string} savedFilterToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSavedFilter: async (savedFilterToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'savedFilterToken' is not null or undefined
            assertParamExists('deleteSavedFilter', 'savedFilterToken', savedFilterToken)
            const localVarPath = `/saved_filters/{saved_filter_token}`
                .replace(`{${"saved_filter_token"}}`, encodeURIComponent(String(savedFilterToken !== undefined ? savedFilterToken : `-saved_filter_token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["write"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/saved_filters/{saved_filter_token}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return all SavedFilters that can be applied to a CostReport.
         * @param {number} [page] The page of results to return.
         * @param {number} [limit] The amount of results to return. The maximum is 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCostReportFilters: async (page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/saved_filters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["read"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/saved_filters',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a specific SavedFilter.
         * @param {string} savedFilterToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSavedFilter: async (savedFilterToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'savedFilterToken' is not null or undefined
            assertParamExists('getSavedFilter', 'savedFilterToken', savedFilterToken)
            const localVarPath = `/saved_filters/{saved_filter_token}`
                .replace(`{${"saved_filter_token"}}`, encodeURIComponent(String(savedFilterToken !== undefined ? savedFilterToken : `-saved_filter_token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/saved_filters/{saved_filter_token}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a SavedFilter for CostReports.
         * @param {string} savedFilterToken 
         * @param {PutSavedFilters} putSavedFilters 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSavedFilterForCostReports: async (savedFilterToken: string, putSavedFilters: PutSavedFilters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'savedFilterToken' is not null or undefined
            assertParamExists('updateSavedFilterForCostReports', 'savedFilterToken', savedFilterToken)
            // verify required parameter 'putSavedFilters' is not null or undefined
            assertParamExists('updateSavedFilterForCostReports', 'putSavedFilters', putSavedFilters)
            const localVarPath = `/saved_filters/{saved_filter_token}`
                .replace(`{${"saved_filter_token"}}`, encodeURIComponent(String(savedFilterToken !== undefined ? savedFilterToken : `-saved_filter_token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: putSavedFilters,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/saved_filters/{saved_filter_token}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(putSavedFilters, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FiltersApi - functional programming interface
 * @export
 */
export const FiltersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FiltersApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a SavedFilter for CostReports.
         * @param {FiltersApiCreateSavedFilterForCostReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSavedFilterForCostReports(requestParameters: FiltersApiCreateSavedFilterForCostReportsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SavedFilter>> {
            const postSavedFilters: PostSavedFilters = {
                title: requestParameters.title,
                workspace_token: requestParameters.workspace_token,
                filter: requestParameters.filter
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSavedFilterForCostReports(postSavedFilters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a SavedFilter for CostReports.
         * @param {FiltersApiDeleteSavedFilterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSavedFilter(requestParameters: FiltersApiDeleteSavedFilterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SavedFilter>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSavedFilter(requestParameters.savedFilterToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return all SavedFilters that can be applied to a CostReport.
         * @param {FiltersApiGetCostReportFiltersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCostReportFilters(requestParameters: FiltersApiGetCostReportFiltersRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SavedFilters>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCostReportFilters(requestParameters.page, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return a specific SavedFilter.
         * @param {FiltersApiGetSavedFilterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSavedFilter(requestParameters: FiltersApiGetSavedFilterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SavedFilter>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSavedFilter(requestParameters.savedFilterToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a SavedFilter for CostReports.
         * @param {FiltersApiUpdateSavedFilterForCostReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSavedFilterForCostReports(requestParameters: FiltersApiUpdateSavedFilterForCostReportsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SavedFilter>> {
            const putSavedFilters: PutSavedFilters = {
                title: requestParameters.title,
                filter: requestParameters.filter
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSavedFilterForCostReports(requestParameters.savedFilterToken, putSavedFilters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FiltersApi - factory interface
 * @export
 */
export const FiltersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FiltersApiFp(configuration)
    return {
        /**
         * Create a SavedFilter for CostReports.
         * @param {FiltersApiCreateSavedFilterForCostReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSavedFilterForCostReports(requestParameters: FiltersApiCreateSavedFilterForCostReportsRequest, options?: AxiosRequestConfig): AxiosPromise<SavedFilter> {
            return localVarFp.createSavedFilterForCostReports(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a SavedFilter for CostReports.
         * @param {FiltersApiDeleteSavedFilterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSavedFilter(requestParameters: FiltersApiDeleteSavedFilterRequest, options?: AxiosRequestConfig): AxiosPromise<SavedFilter> {
            return localVarFp.deleteSavedFilter(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return all SavedFilters that can be applied to a CostReport.
         * @param {FiltersApiGetCostReportFiltersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCostReportFilters(requestParameters: FiltersApiGetCostReportFiltersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<SavedFilters> {
            return localVarFp.getCostReportFilters(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a specific SavedFilter.
         * @param {FiltersApiGetSavedFilterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSavedFilter(requestParameters: FiltersApiGetSavedFilterRequest, options?: AxiosRequestConfig): AxiosPromise<SavedFilter> {
            return localVarFp.getSavedFilter(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a SavedFilter for CostReports.
         * @param {FiltersApiUpdateSavedFilterForCostReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSavedFilterForCostReports(requestParameters: FiltersApiUpdateSavedFilterForCostReportsRequest, options?: AxiosRequestConfig): AxiosPromise<SavedFilter> {
            return localVarFp.updateSavedFilterForCostReports(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createSavedFilterForCostReports operation in FiltersApi.
 * @export
 * @interface FiltersApiCreateSavedFilterForCostReportsRequest
 */
export type FiltersApiCreateSavedFilterForCostReportsRequest = {
    
} & PostSavedFilters

/**
 * Request parameters for deleteSavedFilter operation in FiltersApi.
 * @export
 * @interface FiltersApiDeleteSavedFilterRequest
 */
export type FiltersApiDeleteSavedFilterRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof FiltersApiDeleteSavedFilter
    */
    readonly savedFilterToken: string
    
}

/**
 * Request parameters for getCostReportFilters operation in FiltersApi.
 * @export
 * @interface FiltersApiGetCostReportFiltersRequest
 */
export type FiltersApiGetCostReportFiltersRequest = {
    
    /**
    * The page of results to return.
    * @type {number}
    * @memberof FiltersApiGetCostReportFilters
    */
    readonly page?: number
    
    /**
    * The amount of results to return. The maximum is 1000.
    * @type {number}
    * @memberof FiltersApiGetCostReportFilters
    */
    readonly limit?: number
    
}

/**
 * Request parameters for getSavedFilter operation in FiltersApi.
 * @export
 * @interface FiltersApiGetSavedFilterRequest
 */
export type FiltersApiGetSavedFilterRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof FiltersApiGetSavedFilter
    */
    readonly savedFilterToken: string
    
}

/**
 * Request parameters for updateSavedFilterForCostReports operation in FiltersApi.
 * @export
 * @interface FiltersApiUpdateSavedFilterForCostReportsRequest
 */
export type FiltersApiUpdateSavedFilterForCostReportsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof FiltersApiUpdateSavedFilterForCostReports
    */
    readonly savedFilterToken: string
    
} & PutSavedFilters

/**
 * FiltersApiGenerated - object-oriented interface
 * @export
 * @class FiltersApiGenerated
 * @extends {BaseAPI}
 */
export class FiltersApiGenerated extends BaseAPI {
    /**
     * Create a SavedFilter for CostReports.
     * @param {FiltersApiCreateSavedFilterForCostReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FiltersApiGenerated
     */
    public createSavedFilterForCostReports(requestParameters: FiltersApiCreateSavedFilterForCostReportsRequest, options?: AxiosRequestConfig) {
        return FiltersApiFp(this.configuration).createSavedFilterForCostReports(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a SavedFilter for CostReports.
     * @param {FiltersApiDeleteSavedFilterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FiltersApiGenerated
     */
    public deleteSavedFilter(requestParameters: FiltersApiDeleteSavedFilterRequest, options?: AxiosRequestConfig) {
        return FiltersApiFp(this.configuration).deleteSavedFilter(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return all SavedFilters that can be applied to a CostReport.
     * @param {FiltersApiGetCostReportFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FiltersApiGenerated
     */
    public getCostReportFilters(requestParameters: FiltersApiGetCostReportFiltersRequest = {}, options?: AxiosRequestConfig) {
        return FiltersApiFp(this.configuration).getCostReportFilters(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a specific SavedFilter.
     * @param {FiltersApiGetSavedFilterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FiltersApiGenerated
     */
    public getSavedFilter(requestParameters: FiltersApiGetSavedFilterRequest, options?: AxiosRequestConfig) {
        return FiltersApiFp(this.configuration).getSavedFilter(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a SavedFilter for CostReports.
     * @param {FiltersApiUpdateSavedFilterForCostReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FiltersApiGenerated
     */
    public updateSavedFilterForCostReports(requestParameters: FiltersApiUpdateSavedFilterForCostReportsRequest, options?: AxiosRequestConfig) {
        return FiltersApiFp(this.configuration).updateSavedFilterForCostReports(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

/* tslint:disable */
/* eslint-disable */
/*
Vantage

Vantage API

The version of the OpenAPI document: 2.0.0
Contact: support@vantage.sh

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Dashboard } from '../models';
// @ts-ignore
import { Dashboards } from '../models';
// @ts-ignore
import { Errors } from '../models';
// @ts-ignore
import { PostDashboards } from '../models';
// @ts-ignore
import { PutDashboards } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DashboardsApi - axios parameter creator
 * @export
 */
export const DashboardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a Dashboard.
         * @param {PostDashboards} postDashboards 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboard: async (postDashboards: PostDashboards, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postDashboards' is not null or undefined
            assertParamExists('createDashboard', 'postDashboards', postDashboards)
            const localVarPath = `/dashboards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: postDashboards,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/dashboards',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(postDashboards, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Dashboard.
         * @param {string} dashboardToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboard: async (dashboardToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardToken' is not null or undefined
            assertParamExists('deleteDashboard', 'dashboardToken', dashboardToken)
            const localVarPath = `/dashboards/{dashboard_token}`
                .replace(`{${"dashboard_token"}}`, encodeURIComponent(String(dashboardToken !== undefined ? dashboardToken : `-dashboard_token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["write"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/dashboards/{dashboard_token}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return all Dashboards.
         * @param {number} [page] The page of results to return.
         * @param {number} [limit] The amount of results to return. The maximum is 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dashboards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["read"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/dashboards',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a specific Dashboard.
         * @param {string} dashboardToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificDashboard: async (dashboardToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardToken' is not null or undefined
            assertParamExists('getSpecificDashboard', 'dashboardToken', dashboardToken)
            const localVarPath = `/dashboards/{dashboard_token}`
                .replace(`{${"dashboard_token"}}`, encodeURIComponent(String(dashboardToken !== undefined ? dashboardToken : `-dashboard_token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/dashboards/{dashboard_token}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Dashboard.
         * @param {string} dashboardToken 
         * @param {PutDashboards} putDashboards 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDashboard: async (dashboardToken: string, putDashboards: PutDashboards, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dashboardToken' is not null or undefined
            assertParamExists('updateDashboard', 'dashboardToken', dashboardToken)
            // verify required parameter 'putDashboards' is not null or undefined
            assertParamExists('updateDashboard', 'putDashboards', putDashboards)
            const localVarPath = `/dashboards/{dashboard_token}`
                .replace(`{${"dashboard_token"}}`, encodeURIComponent(String(dashboardToken !== undefined ? dashboardToken : `-dashboard_token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: putDashboards,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/dashboards/{dashboard_token}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(putDashboards, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DashboardsApi - functional programming interface
 * @export
 */
export const DashboardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DashboardsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a Dashboard.
         * @param {DashboardsApiCreateDashboardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDashboard(requestParameters: DashboardsApiCreateDashboardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dashboard>> {
            const postDashboards: PostDashboards = {
                title: requestParameters.title,
                widget_tokens: requestParameters.widget_tokens,
                saved_filter_tokens: requestParameters.saved_filter_tokens,
                date_bin: requestParameters.date_bin,
                date_interval: requestParameters.date_interval,
                start_date: requestParameters.start_date,
                end_date: requestParameters.end_date,
                workspace_token: requestParameters.workspace_token
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDashboard(postDashboards, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Dashboard.
         * @param {DashboardsApiDeleteDashboardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDashboard(requestParameters: DashboardsApiDeleteDashboardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dashboard>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDashboard(requestParameters.dashboardToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return all Dashboards.
         * @param {DashboardsApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(requestParameters: DashboardsApiGetAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dashboards>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(requestParameters.page, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return a specific Dashboard.
         * @param {DashboardsApiGetSpecificDashboardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificDashboard(requestParameters: DashboardsApiGetSpecificDashboardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dashboard>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificDashboard(requestParameters.dashboardToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a Dashboard.
         * @param {DashboardsApiUpdateDashboardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDashboard(requestParameters: DashboardsApiUpdateDashboardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dashboard>> {
            const putDashboards: PutDashboards = {
                title: requestParameters.title,
                widget_tokens: requestParameters.widget_tokens,
                saved_filter_tokens: requestParameters.saved_filter_tokens,
                date_bin: requestParameters.date_bin,
                date_interval: requestParameters.date_interval,
                start_date: requestParameters.start_date,
                end_date: requestParameters.end_date
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDashboard(requestParameters.dashboardToken, putDashboards, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DashboardsApi - factory interface
 * @export
 */
export const DashboardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DashboardsApiFp(configuration)
    return {
        /**
         * Create a Dashboard.
         * @param {DashboardsApiCreateDashboardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDashboard(requestParameters: DashboardsApiCreateDashboardRequest, options?: AxiosRequestConfig): AxiosPromise<Dashboard> {
            return localVarFp.createDashboard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Dashboard.
         * @param {DashboardsApiDeleteDashboardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDashboard(requestParameters: DashboardsApiDeleteDashboardRequest, options?: AxiosRequestConfig): AxiosPromise<Dashboard> {
            return localVarFp.deleteDashboard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return all Dashboards.
         * @param {DashboardsApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(requestParameters: DashboardsApiGetAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Dashboards> {
            return localVarFp.getAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a specific Dashboard.
         * @param {DashboardsApiGetSpecificDashboardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificDashboard(requestParameters: DashboardsApiGetSpecificDashboardRequest, options?: AxiosRequestConfig): AxiosPromise<Dashboard> {
            return localVarFp.getSpecificDashboard(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Dashboard.
         * @param {DashboardsApiUpdateDashboardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDashboard(requestParameters: DashboardsApiUpdateDashboardRequest, options?: AxiosRequestConfig): AxiosPromise<Dashboard> {
            return localVarFp.updateDashboard(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createDashboard operation in DashboardsApi.
 * @export
 * @interface DashboardsApiCreateDashboardRequest
 */
export type DashboardsApiCreateDashboardRequest = {
    
} & PostDashboards

/**
 * Request parameters for deleteDashboard operation in DashboardsApi.
 * @export
 * @interface DashboardsApiDeleteDashboardRequest
 */
export type DashboardsApiDeleteDashboardRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DashboardsApiDeleteDashboard
    */
    readonly dashboardToken: string
    
}

/**
 * Request parameters for getAll operation in DashboardsApi.
 * @export
 * @interface DashboardsApiGetAllRequest
 */
export type DashboardsApiGetAllRequest = {
    
    /**
    * The page of results to return.
    * @type {number}
    * @memberof DashboardsApiGetAll
    */
    readonly page?: number
    
    /**
    * The amount of results to return. The maximum is 1000.
    * @type {number}
    * @memberof DashboardsApiGetAll
    */
    readonly limit?: number
    
}

/**
 * Request parameters for getSpecificDashboard operation in DashboardsApi.
 * @export
 * @interface DashboardsApiGetSpecificDashboardRequest
 */
export type DashboardsApiGetSpecificDashboardRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DashboardsApiGetSpecificDashboard
    */
    readonly dashboardToken: string
    
}

/**
 * Request parameters for updateDashboard operation in DashboardsApi.
 * @export
 * @interface DashboardsApiUpdateDashboardRequest
 */
export type DashboardsApiUpdateDashboardRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DashboardsApiUpdateDashboard
    */
    readonly dashboardToken: string
    
} & PutDashboards

/**
 * DashboardsApiGenerated - object-oriented interface
 * @export
 * @class DashboardsApiGenerated
 * @extends {BaseAPI}
 */
export class DashboardsApiGenerated extends BaseAPI {
    /**
     * Create a Dashboard.
     * @param {DashboardsApiCreateDashboardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApiGenerated
     */
    public createDashboard(requestParameters: DashboardsApiCreateDashboardRequest, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).createDashboard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Dashboard.
     * @param {DashboardsApiDeleteDashboardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApiGenerated
     */
    public deleteDashboard(requestParameters: DashboardsApiDeleteDashboardRequest, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).deleteDashboard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return all Dashboards.
     * @param {DashboardsApiGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApiGenerated
     */
    public getAll(requestParameters: DashboardsApiGetAllRequest = {}, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).getAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a specific Dashboard.
     * @param {DashboardsApiGetSpecificDashboardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApiGenerated
     */
    public getSpecificDashboard(requestParameters: DashboardsApiGetSpecificDashboardRequest, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).getSpecificDashboard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a Dashboard.
     * @param {DashboardsApiUpdateDashboardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApiGenerated
     */
    public updateDashboard(requestParameters: DashboardsApiUpdateDashboardRequest, options?: AxiosRequestConfig) {
        return DashboardsApiFp(this.configuration).updateDashboard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

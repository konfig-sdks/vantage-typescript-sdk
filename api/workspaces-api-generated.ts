/* tslint:disable */
/* eslint-disable */
/*
Vantage

Vantage API

The version of the OpenAPI document: 2.0.0
Contact: support@vantage.sh

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Errors } from '../models';
// @ts-ignore
import { Workspace } from '../models';
// @ts-ignore
import { Workspaces } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WorkspacesApi - axios parameter creator
 * @export
 */
export const WorkspacesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return a specific Workspace.
         * @param {string} workspaceToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificWorkspace: async (workspaceToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceToken' is not null or undefined
            assertParamExists('getSpecificWorkspace', 'workspaceToken', workspaceToken)
            const localVarPath = `/workspaces/{workspace_token}`
                .replace(`{${"workspace_token"}}`, encodeURIComponent(String(workspaceToken !== undefined ? workspaceToken : `-workspace_token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workspaces/{workspace_token}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return all Workspaces that the current API token has access to.
         * @param {number} [page] The page of results to return.
         * @param {number} [limit] The amount of results to return. The maximum is 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccessible: async (page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["read"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workspaces',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkspacesApi - functional programming interface
 * @export
 */
export const WorkspacesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkspacesApiAxiosParamCreator(configuration)
    return {
        /**
         * Return a specific Workspace.
         * @param {WorkspacesApiGetSpecificWorkspaceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificWorkspace(requestParameters: WorkspacesApiGetSpecificWorkspaceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workspace>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificWorkspace(requestParameters.workspaceToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return all Workspaces that the current API token has access to.
         * @param {WorkspacesApiListAccessibleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccessible(requestParameters: WorkspacesApiListAccessibleRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workspaces>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAccessible(requestParameters.page, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WorkspacesApi - factory interface
 * @export
 */
export const WorkspacesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkspacesApiFp(configuration)
    return {
        /**
         * Return a specific Workspace.
         * @param {WorkspacesApiGetSpecificWorkspaceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificWorkspace(requestParameters: WorkspacesApiGetSpecificWorkspaceRequest, options?: AxiosRequestConfig): AxiosPromise<Workspace> {
            return localVarFp.getSpecificWorkspace(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return all Workspaces that the current API token has access to.
         * @param {WorkspacesApiListAccessibleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccessible(requestParameters: WorkspacesApiListAccessibleRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Workspaces> {
            return localVarFp.listAccessible(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getSpecificWorkspace operation in WorkspacesApi.
 * @export
 * @interface WorkspacesApiGetSpecificWorkspaceRequest
 */
export type WorkspacesApiGetSpecificWorkspaceRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof WorkspacesApiGetSpecificWorkspace
    */
    readonly workspaceToken: string
    
}

/**
 * Request parameters for listAccessible operation in WorkspacesApi.
 * @export
 * @interface WorkspacesApiListAccessibleRequest
 */
export type WorkspacesApiListAccessibleRequest = {
    
    /**
    * The page of results to return.
    * @type {number}
    * @memberof WorkspacesApiListAccessible
    */
    readonly page?: number
    
    /**
    * The amount of results to return. The maximum is 1000.
    * @type {number}
    * @memberof WorkspacesApiListAccessible
    */
    readonly limit?: number
    
}

/**
 * WorkspacesApiGenerated - object-oriented interface
 * @export
 * @class WorkspacesApiGenerated
 * @extends {BaseAPI}
 */
export class WorkspacesApiGenerated extends BaseAPI {
    /**
     * Return a specific Workspace.
     * @param {WorkspacesApiGetSpecificWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApiGenerated
     */
    public getSpecificWorkspace(requestParameters: WorkspacesApiGetSpecificWorkspaceRequest, options?: AxiosRequestConfig) {
        return WorkspacesApiFp(this.configuration).getSpecificWorkspace(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return all Workspaces that the current API token has access to.
     * @param {WorkspacesApiListAccessibleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApiGenerated
     */
    public listAccessible(requestParameters: WorkspacesApiListAccessibleRequest = {}, options?: AxiosRequestConfig) {
        return WorkspacesApiFp(this.configuration).listAccessible(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

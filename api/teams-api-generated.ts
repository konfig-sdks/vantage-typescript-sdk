/* tslint:disable */
/* eslint-disable */
/*
Vantage

Vantage API

The version of the OpenAPI document: 2.0.0
Contact: support@vantage.sh

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Errors } from '../models';
// @ts-ignore
import { PostTeams } from '../models';
// @ts-ignore
import { PutTeams } from '../models';
// @ts-ignore
import { Team } from '../models';
// @ts-ignore
import { Teams } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TeamsApi - axios parameter creator
 * @export
 */
export const TeamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new Team.
         * @param {PostTeams} postTeams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewTeam: async (postTeams: PostTeams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postTeams' is not null or undefined
            assertParamExists('createNewTeam', 'postTeams', postTeams)
            const localVarPath = `/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: postTeams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(postTeams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a specific Team.
         * @param {string} teamToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificTeam: async (teamToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamToken' is not null or undefined
            assertParamExists('getSpecificTeam', 'teamToken', teamToken)
            const localVarPath = `/teams/{team_token}`
                .replace(`{${"team_token"}}`, encodeURIComponent(String(teamToken !== undefined ? teamToken : `-team_token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{team_token}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return all Teams that the current API token has access to.
         * @param {number} [page] The page of results to return.
         * @param {number} [limit] The amount of results to return. The maximum is 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccessible: async (page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["read"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Team.
         * @param {string} teamToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTeam: async (teamToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamToken' is not null or undefined
            assertParamExists('removeTeam', 'teamToken', teamToken)
            const localVarPath = `/teams/{team_token}`
                .replace(`{${"team_token"}}`, encodeURIComponent(String(teamToken !== undefined ? teamToken : `-team_token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["write"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{team_token}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Team.
         * @param {string} teamToken 
         * @param {PutTeams} putTeams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeam: async (teamToken: string, putTeams: PutTeams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamToken' is not null or undefined
            assertParamExists('updateTeam', 'teamToken', teamToken)
            // verify required parameter 'putTeams' is not null or undefined
            assertParamExists('updateTeam', 'putTeams', putTeams)
            const localVarPath = `/teams/{team_token}`
                .replace(`{${"team_token"}}`, encodeURIComponent(String(teamToken !== undefined ? teamToken : `-team_token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: putTeams,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{team_token}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(putTeams, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamsApi - functional programming interface
 * @export
 */
export const TeamsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new Team.
         * @param {TeamsApiCreateNewTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewTeam(requestParameters: TeamsApiCreateNewTeamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const postTeams: PostTeams = {
                description: requestParameters.description,
                name: requestParameters.name,
                workspace_tokens: requestParameters.workspace_tokens,
                user_tokens: requestParameters.user_tokens,
                user_emails: requestParameters.user_emails,
                role: requestParameters.role
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewTeam(postTeams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return a specific Team.
         * @param {TeamsApiGetSpecificTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificTeam(requestParameters: TeamsApiGetSpecificTeamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificTeam(requestParameters.teamToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return all Teams that the current API token has access to.
         * @param {TeamsApiListAccessibleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAccessible(requestParameters: TeamsApiListAccessibleRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Teams>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAccessible(requestParameters.page, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Team.
         * @param {TeamsApiRemoveTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeTeam(requestParameters: TeamsApiRemoveTeamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeTeam(requestParameters.teamToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a Team.
         * @param {TeamsApiUpdateTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTeam(requestParameters: TeamsApiUpdateTeamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const putTeams: PutTeams = {
                description: requestParameters.description,
                name: requestParameters.name,
                workspace_tokens: requestParameters.workspace_tokens,
                user_tokens: requestParameters.user_tokens,
                user_emails: requestParameters.user_emails,
                role: requestParameters.role
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTeam(requestParameters.teamToken, putTeams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeamsApi - factory interface
 * @export
 */
export const TeamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamsApiFp(configuration)
    return {
        /**
         * Create a new Team.
         * @param {TeamsApiCreateNewTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewTeam(requestParameters: TeamsApiCreateNewTeamRequest, options?: AxiosRequestConfig): AxiosPromise<Team> {
            return localVarFp.createNewTeam(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a specific Team.
         * @param {TeamsApiGetSpecificTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificTeam(requestParameters: TeamsApiGetSpecificTeamRequest, options?: AxiosRequestConfig): AxiosPromise<Team> {
            return localVarFp.getSpecificTeam(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return all Teams that the current API token has access to.
         * @param {TeamsApiListAccessibleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAccessible(requestParameters: TeamsApiListAccessibleRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Teams> {
            return localVarFp.listAccessible(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Team.
         * @param {TeamsApiRemoveTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTeam(requestParameters: TeamsApiRemoveTeamRequest, options?: AxiosRequestConfig): AxiosPromise<Team> {
            return localVarFp.removeTeam(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Team.
         * @param {TeamsApiUpdateTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeam(requestParameters: TeamsApiUpdateTeamRequest, options?: AxiosRequestConfig): AxiosPromise<Team> {
            return localVarFp.updateTeam(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewTeam operation in TeamsApi.
 * @export
 * @interface TeamsApiCreateNewTeamRequest
 */
export type TeamsApiCreateNewTeamRequest = {
    
} & PostTeams

/**
 * Request parameters for getSpecificTeam operation in TeamsApi.
 * @export
 * @interface TeamsApiGetSpecificTeamRequest
 */
export type TeamsApiGetSpecificTeamRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TeamsApiGetSpecificTeam
    */
    readonly teamToken: string
    
}

/**
 * Request parameters for listAccessible operation in TeamsApi.
 * @export
 * @interface TeamsApiListAccessibleRequest
 */
export type TeamsApiListAccessibleRequest = {
    
    /**
    * The page of results to return.
    * @type {number}
    * @memberof TeamsApiListAccessible
    */
    readonly page?: number
    
    /**
    * The amount of results to return. The maximum is 1000.
    * @type {number}
    * @memberof TeamsApiListAccessible
    */
    readonly limit?: number
    
}

/**
 * Request parameters for removeTeam operation in TeamsApi.
 * @export
 * @interface TeamsApiRemoveTeamRequest
 */
export type TeamsApiRemoveTeamRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TeamsApiRemoveTeam
    */
    readonly teamToken: string
    
}

/**
 * Request parameters for updateTeam operation in TeamsApi.
 * @export
 * @interface TeamsApiUpdateTeamRequest
 */
export type TeamsApiUpdateTeamRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TeamsApiUpdateTeam
    */
    readonly teamToken: string
    
} & PutTeams

/**
 * TeamsApiGenerated - object-oriented interface
 * @export
 * @class TeamsApiGenerated
 * @extends {BaseAPI}
 */
export class TeamsApiGenerated extends BaseAPI {
    /**
     * Create a new Team.
     * @param {TeamsApiCreateNewTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiGenerated
     */
    public createNewTeam(requestParameters: TeamsApiCreateNewTeamRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).createNewTeam(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a specific Team.
     * @param {TeamsApiGetSpecificTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiGenerated
     */
    public getSpecificTeam(requestParameters: TeamsApiGetSpecificTeamRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getSpecificTeam(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return all Teams that the current API token has access to.
     * @param {TeamsApiListAccessibleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiGenerated
     */
    public listAccessible(requestParameters: TeamsApiListAccessibleRequest = {}, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listAccessible(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Team.
     * @param {TeamsApiRemoveTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiGenerated
     */
    public removeTeam(requestParameters: TeamsApiRemoveTeamRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).removeTeam(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a Team.
     * @param {TeamsApiUpdateTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiGenerated
     */
    public updateTeam(requestParameters: TeamsApiUpdateTeamRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).updateTeam(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

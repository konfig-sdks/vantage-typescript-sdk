/* tslint:disable */
/* eslint-disable */
/*
Vantage

Vantage API

The version of the OpenAPI document: 2.0.0
Contact: support@vantage.sh

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Errors } from '../models';
// @ts-ignore
import { PostSegments } from '../models';
// @ts-ignore
import { PostSegmentsReportSettings } from '../models';
// @ts-ignore
import { PutSegments } from '../models';
// @ts-ignore
import { Segment } from '../models';
// @ts-ignore
import { Segments } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SegmentsApi - axios parameter creator
 * @export
 */
export const SegmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a Segment.
         * @param {PostSegments} postSegments 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSegment: async (postSegments: PostSegments, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postSegments' is not null or undefined
            assertParamExists('createSegment', 'postSegments', postSegments)
            const localVarPath = `/segments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: postSegments,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/segments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(postSegments, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a Segment.
         * @param {string} segmentToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSegmentById: async (segmentToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'segmentToken' is not null or undefined
            assertParamExists('getSegmentById', 'segmentToken', segmentToken)
            const localVarPath = `/segments/{segment_token}`
                .replace(`{${"segment_token"}}`, encodeURIComponent(String(segmentToken !== undefined ? segmentToken : `-segment_token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/segments/{segment_token}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return all Segments.
         * @param {number} [page] The page of results to return.
         * @param {number} [limit] The amount of results to return. The maximum is 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/segments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["read"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/segments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Segment.
         * @param {string} segmentToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSegment: async (segmentToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'segmentToken' is not null or undefined
            assertParamExists('removeSegment', 'segmentToken', segmentToken)
            const localVarPath = `/segments/{segment_token}`
                .replace(`{${"segment_token"}}`, encodeURIComponent(String(segmentToken !== undefined ? segmentToken : `-segment_token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["write"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/segments/{segment_token}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Segment.
         * @param {string} segmentToken 
         * @param {PutSegments} putSegments 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSegmentById: async (segmentToken: string, putSegments: PutSegments, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'segmentToken' is not null or undefined
            assertParamExists('updateSegmentById', 'segmentToken', segmentToken)
            // verify required parameter 'putSegments' is not null or undefined
            assertParamExists('updateSegmentById', 'putSegments', putSegments)
            const localVarPath = `/segments/{segment_token}`
                .replace(`{${"segment_token"}}`, encodeURIComponent(String(segmentToken !== undefined ? segmentToken : `-segment_token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", ["write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: putSegments,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/segments/{segment_token}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(putSegments, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SegmentsApi - functional programming interface
 * @export
 */
export const SegmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SegmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a Segment.
         * @param {SegmentsApiCreateSegmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSegment(requestParameters: SegmentsApiCreateSegmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Segment>> {
            const postSegments: PostSegments = {
                title: requestParameters.title,
                description: requestParameters.description,
                priority: requestParameters.priority,
                track_unallocated: requestParameters.track_unallocated,
                report_settings: requestParameters.report_settings,
                workspace_token: requestParameters.workspace_token,
                filter: requestParameters.filter,
                parent_segment_token: requestParameters.parent_segment_token
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSegment(postSegments, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return a Segment.
         * @param {SegmentsApiGetSegmentByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSegmentById(requestParameters: SegmentsApiGetSegmentByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Segment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSegmentById(requestParameters.segmentToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return all Segments.
         * @param {SegmentsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: SegmentsApiListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Segments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.page, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a Segment.
         * @param {SegmentsApiRemoveSegmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeSegment(requestParameters: SegmentsApiRemoveSegmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Segment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeSegment(requestParameters.segmentToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a Segment.
         * @param {SegmentsApiUpdateSegmentByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSegmentById(requestParameters: SegmentsApiUpdateSegmentByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Segment>> {
            const putSegments: PutSegments = {
                title: requestParameters.title,
                description: requestParameters.description,
                priority: requestParameters.priority,
                track_unallocated: requestParameters.track_unallocated,
                report_settings: requestParameters.report_settings,
                filter: requestParameters.filter,
                parent_segment_token: requestParameters.parent_segment_token
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSegmentById(requestParameters.segmentToken, putSegments, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SegmentsApi - factory interface
 * @export
 */
export const SegmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SegmentsApiFp(configuration)
    return {
        /**
         * Create a Segment.
         * @param {SegmentsApiCreateSegmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSegment(requestParameters: SegmentsApiCreateSegmentRequest, options?: AxiosRequestConfig): AxiosPromise<Segment> {
            return localVarFp.createSegment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a Segment.
         * @param {SegmentsApiGetSegmentByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSegmentById(requestParameters: SegmentsApiGetSegmentByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Segment> {
            return localVarFp.getSegmentById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return all Segments.
         * @param {SegmentsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: SegmentsApiListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Segments> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a Segment.
         * @param {SegmentsApiRemoveSegmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSegment(requestParameters: SegmentsApiRemoveSegmentRequest, options?: AxiosRequestConfig): AxiosPromise<Segment> {
            return localVarFp.removeSegment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Segment.
         * @param {SegmentsApiUpdateSegmentByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSegmentById(requestParameters: SegmentsApiUpdateSegmentByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Segment> {
            return localVarFp.updateSegmentById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createSegment operation in SegmentsApi.
 * @export
 * @interface SegmentsApiCreateSegmentRequest
 */
export type SegmentsApiCreateSegmentRequest = {
    
} & PostSegments

/**
 * Request parameters for getSegmentById operation in SegmentsApi.
 * @export
 * @interface SegmentsApiGetSegmentByIdRequest
 */
export type SegmentsApiGetSegmentByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SegmentsApiGetSegmentById
    */
    readonly segmentToken: string
    
}

/**
 * Request parameters for list operation in SegmentsApi.
 * @export
 * @interface SegmentsApiListRequest
 */
export type SegmentsApiListRequest = {
    
    /**
    * The page of results to return.
    * @type {number}
    * @memberof SegmentsApiList
    */
    readonly page?: number
    
    /**
    * The amount of results to return. The maximum is 1000.
    * @type {number}
    * @memberof SegmentsApiList
    */
    readonly limit?: number
    
}

/**
 * Request parameters for removeSegment operation in SegmentsApi.
 * @export
 * @interface SegmentsApiRemoveSegmentRequest
 */
export type SegmentsApiRemoveSegmentRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SegmentsApiRemoveSegment
    */
    readonly segmentToken: string
    
}

/**
 * Request parameters for updateSegmentById operation in SegmentsApi.
 * @export
 * @interface SegmentsApiUpdateSegmentByIdRequest
 */
export type SegmentsApiUpdateSegmentByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SegmentsApiUpdateSegmentById
    */
    readonly segmentToken: string
    
} & PutSegments

/**
 * SegmentsApiGenerated - object-oriented interface
 * @export
 * @class SegmentsApiGenerated
 * @extends {BaseAPI}
 */
export class SegmentsApiGenerated extends BaseAPI {
    /**
     * Create a Segment.
     * @param {SegmentsApiCreateSegmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApiGenerated
     */
    public createSegment(requestParameters: SegmentsApiCreateSegmentRequest, options?: AxiosRequestConfig) {
        return SegmentsApiFp(this.configuration).createSegment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a Segment.
     * @param {SegmentsApiGetSegmentByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApiGenerated
     */
    public getSegmentById(requestParameters: SegmentsApiGetSegmentByIdRequest, options?: AxiosRequestConfig) {
        return SegmentsApiFp(this.configuration).getSegmentById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return all Segments.
     * @param {SegmentsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApiGenerated
     */
    public list(requestParameters: SegmentsApiListRequest = {}, options?: AxiosRequestConfig) {
        return SegmentsApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a Segment.
     * @param {SegmentsApiRemoveSegmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApiGenerated
     */
    public removeSegment(requestParameters: SegmentsApiRemoveSegmentRequest, options?: AxiosRequestConfig) {
        return SegmentsApiFp(this.configuration).removeSegment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a Segment.
     * @param {SegmentsApiUpdateSegmentByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApiGenerated
     */
    public updateSegmentById(requestParameters: SegmentsApiUpdateSegmentByIdRequest, options?: AxiosRequestConfig) {
        return SegmentsApiFp(this.configuration).updateSegmentById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
